// Luke Smith
// Michael Molenaar
// Charles Zmuda



CLASS Deck
	DECLARATIONS
		Card cards[] = new Card
		
	public void Deck
		DECLARATIONS
			num i
			num j
			private ArrayList[Card] cards
			this.cards = new ArrayList[Card]
		
		
	public void createFullDeck() // populate a full deck
		DECLARATIONS
			string cardSuit
			num cardValue
		FOR i = 1 TO 4 STEP 1
			FOR J = 1 TO 52 STEP 1
				this.cards.add( Card(cardSuit,CardValue)
			ENDFOR
		ENDFOR
	
	RETURN
	
	public void shuffle()
		DECLARATIONS
			num i
			ArrayList[Card] tmpDeck = new ArrayList[]
			num random = randomNumberGenereator() //built in random number generator
			num randomCardIndex = 0
			num originalSize = this.cards.length() //tells us how big the current array is
			num tmpDeck[]		//temp deck holder
			
			FOR i = 0 to originalSize-1 STEP 1
				tmpDeck[i] = randomCardIndex
			ENDFOR
			this.cards = tmpDeck
			
	RETURN
	
	public void removeCard(num i)
		this.cards.remove(i)
	RETURN
	
	public Card getCard(num i)
		
	RETURN this.cards.get(i)
	
	public void addCard(Card addCard) //passed a card object
		this.cards.add(addCard)
	RETURN
	
	public void draw(Deck comingFrom) //passes a Deck object	
		this.cards.add(comingFrom.getCard(0))	//gets card from deck
		comingFrom.removeCard(0)					// removes that card from the deck so it cant be used again
	RETURN
	
	public string toString()
		DECLARATIONS	
			string cardListOutput
			num i
			
		FOR i = 1 to this.cards STEP 1 // iterates all cards in hand
			cardListOutput = cardListOutput + "\n" + this.card[i].toString() // converts card to output format
		ENDFOR
	RETURN cardListOutput
	
	public void moveAllToDeck()
		DECLARATIONS
			num thisDeckSize = this.cards.size() //brings us the number of cards in the deck
			num i 
			
		FOR i = 0 TO thisDeckSize STEP 1 	//push cards to deck
			moveTo.addCard(this.getCard(i))
		ENDFOR
		
		FOR i = 0 TO thisDeckSize STEP 1		//clear out deck
			this.removeCard(0)
		ENDFOR 
	RETURN
	
	public num deckSize()
		
	RETURN this.cards.size() //return the size of the deck
	
	public num cardsValue()
		num totalValue
		num numAces
		num in
		
		FOR i = 0 to this.decksize() STEP 1		//iterates through the deck
			SWITCH this.GetValue()
				CASE TWO
					totalValue = totalvalue + 2
				CASE THREE
					totalValue = totalvalue + 3
				CASE FOUR
					totalValue = totalvalue + 4
				CASE FIVE
					totalValue = totalvalue + 5
				CASE SIX
					totalValue = totalvalue + 6
				CASE SEVEN
					totalValue = totalvalue + 7
				CASE EIGHT
					totalValue = totalvalue + 8
				CASE NINE
					totalValue = totalvalue + 9
				CASE TEN 
					totalValue = totalvalue + 10
				CASE JACK
					totalValue = totalvalue + 10
				CASE QUEEN
					totalValue = totalvalue + 10
				CASE KING
					totalValue = totalvalue + 10
				CASE ACE
					totalValue = totalvalue + 1
			ENDSWITCH
		ENDFOR	
		
		//Dealing with those darn Aces
		FOR i = 0 TO numAces STEP 1
			IF totalValue > 10 THEN	//if it needs to be converted to a 1
				totalValue = totalValue + 1
			ELSE							// if it needs to be an 11
				totalValue = totalValue + 11
			ENDIF
		ENDFOR				
	RETURN totalValue
	
ENDCLASS

CLASS Card
	DECLARATIONS
		private Suit suit //from the suit object/class
		private Value value //from the value object/class
		private string combined
		
	public Card(Suit suit, Value value)
		this.suit = suit
		this.value = value
	RETURN
		
	public void getValue()
		
	RETURN this.value
	
	public string toString()
		combined = convertToString(suit) + " - " + convertToString(value) // convertToString is a built in function of some name
	RETURN combined
	
ENDCLASS

CLASS Value
	DECLARATIONS
		public Value = [TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE]
		
ENDCLASS

CLASS Suit
	DECLARATIONS
		public Suit = [HEART, SPADE, DIAMOND, CLUB]
	
ENDCLASS





START
	DECLARATIONS
		Deck playingDeck = new Deck	//these 3 lines create new decks for each need
		Deck playerCards = new Deck
		Deck dealerCards = new Deck
		num playerMoney = 100		//starting money amount
		num playerBet 
		bool endRound 
		bool gameNotOver = true
		num response
		
	
	OUTPUT "Welcome to blackjack"
	
	playingDeck.createFullDeck()		//start a new deck
	playingDeck.shuffle()				//"shuffle" the deck
	
	OUTPUT "You have " + playerMoney + " how much do you want to bet?"
	INPUT playerBet
	endRound = false
	
	WHILE playerBet > playerMoney 
		OUTPUT "Sorry, you dont have enough money for that bet"
		OUTPUT "You have " + playerMoney + " how much do you want to bet?"
		INPUT playerBet
	ENDWHILE
	
	WHILE playerMoney > 0
		OUTPUT "Dealing Cards"
		playerCards.draw(playingDeck) // player gets 2 cards
		playerCards.draw(playingDeck)
		
		dealerCards.draw(playingDeck)	// dealer gets 2 cards
		dealerCards.draw(playingDeck)
		
		WHILE(gameNotOver == true)
			// show player their hand
			OUTPUT "Your hand is " + playerCards.toString()
			OUTPUT "Your hand is valued at " + playerCards.cardsValue()
		
			// show dealer's cards
			OUTPUT "Dealers hand is " dealerCards.getCard(0).toString() + "and 'facedown card'"
			
			//see if player has blackjack
			IF playerCards.cardsValue() == 21 THEN	
				//print lots of celebration text!
				OUTPUT "You have blackjack!"
				playerBet = playerBet *1.5
				playerMoney = playerMoney + playerBet
				endRound = true
			ENDIF
			
			OUTPUT "1 - to hit"
			OUTPUT "2 - to stand"
			INPUT response
			
			IF response == 1 THEN
				playerCards.draw(playingDeck)
				OUTPUT "you drew a " + playerCards.getCard(playerCards()-1).toString()
				
				IF playerCards.cardsValue() > 21 THEN	
					OUTPUT "You busted, You hand valued at " + playerCards.cardsValue()
					playerMoney = playerMoney - playerBet
					endRound = true
					gameNotOver = false
				ENDIF
			IF response == 2 THEN	
				gameNotOver = false
			ENDIF
		ENDWHILE
		
		OUTPUT "Dealers Cards " + dealerCards.toString()
		
		IF (dealerCards.cardsValue() > playerCards.cardsValue()) AND endRound == false THEN		//Dealer beats you
			OUTPUT "Dealer beats you"
			playerMoney = playerMoney - playerBet
			endRound = true
		ENDIF
		
		WHILE (dealerCards.cardsValue() < 17)) AND endRound == false
			dealerCards.draw(playingDeck)
			OUTPUT "Dealer drew " + dealerCards.getCard(dealerCards.deckSize()-1).toString()
		ENDWHILE
		
		OUTPUT "Dealers hand value" + dealerCards.cardsValue()
		
		IF (dealerCards.cardsValue()>21) AND endRound == false THEN		// Dealer busts
			OUTPUT "Dealer Busted, you win"
			playerMoney = playerMoney + playerBet
			endRound = true
		ENDIF
		
		
		IF (dealerCards.cardsValue() == playerCards.cardsValue()) AND endRound == false THEN		//push
			OUTPUT "Push"
			endRound = true
		ENDIF
		
		IF (playerCards.cardsValue() > dealerCards.cardsValue()) && endRound == false THEN		//player wins
			OUTPUT "You win"
			playerMoney = playerMoney + playerBet
			endRound = true
		ELSE IF endRound == false THEN	
			OUTPUT "Dealer Wins"
			playerMoney = playerMoney - playerBet			
		ENDIF
		
		playerCards.moveAllToDeck(playingDeck)
		dealerCards.moveAllToDeck(playingDeck)
		
		OUTPUT "end of hand"
		
		OUTPUT "You have " + playerMoney + " how much do you want to bet?"
		INPUT playerBet
		endRound = false
		
		WHILE playerBet > playerMoney 
			OUTPUT "Sorry, you dont have enough money for that bet"
			OUTPUT "You have " + playerMoney + " how much do you want to bet?"
			INPUT playerBet
		ENDWHILE
	
	ENDWHILE // game is over
	
	OUTPUT "Game is over, you lost all of your money"
			
		
			
STOP
			
			
	
	
	
	
	
	


